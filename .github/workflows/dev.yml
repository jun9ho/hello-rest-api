name: Java CI/CD with SCP to EC2

on:
  push:
    branches:
      - dev  # dev 브랜치에 push 될 때마다 실행

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    steps:
    
    # 1. 소스 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Java 17 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'corretto' # Amazon Corretto (OpenJDK) 권장
        java-version: '17'

    # 3. Gradle Wrapper 권한 부여 (Linux/macOS 환경)
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # 4. Spring Boot Jar 파일 빌드
    - name: Build with Gradle
      run: ./gradlew bootJar

    # 5. SCP를 이용한 EC2 배포 및 서비스 재시작
    - name: Deploy to EC2 via SSH/SCP
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.AWS_EC2_HOST }}  # EC2 IP (비밀 변수)
        username: ${{ secrets.AWS_EC2_USER }} # EC2 사용자 (비밀 변수)
        key: ${{ secrets.AWS_EC2_SSH_KEY }} # SSH 개인 키 (비밀 변수)
        port: 22
        source: 'build/libs/*.jar' # 빌드된 Jar 파일 경로
        target: '/home/${{ secrets.AWS_EC2_USER }}/app/' # EC2에 전송할 경로
        
    - name: Restart application on EC2 via SSH
      uses: appleboy/ssh-action@v1.0.1
      with:
        host: ${{ secrets.AWS_EC2_HOST }}
        username: ${{ secrets.AWS_EC2_USER }}
        key: ${{ secrets.AWS_EC2_SSH_KEY }}
        port: 22
        script: |
          set -e

          REMOTE_USER="${{ secrets.AWS_EC2_USER }}"
          REMOTE_APP_DIR="/home/${REMOTE_USER}/app"
          LOG_FILE="$REMOTE_APP_DIR/app.log"

          # 1) 최신 JAR 파일 찾기 (하위 폴더 포함)
          APP_PATH=$(find "$REMOTE_APP_DIR" -type f -name "*.jar" -print0 | xargs -0 ls -1t 2>/dev/null | head -n1 || true)

          if [ -z "$APP_PATH" ]; then
            echo "> JAR 파일을 찾지 못했습니다. ($REMOTE_APP_DIR 하위 확인)"
            ls -al "$REMOTE_APP_DIR"
            exit 1
          fi

          echo "> 찾아진 JAR: $APP_PATH"

          # 2) JAR을 app 루트로 이동(선택) — 이름은 그대로 유지
          BASENAME=$(basename "$APP_PATH")
          if [ "$APP_PATH" != "$REMOTE_APP_DIR/$BASENAME" ]; then
            echo "> $APP_PATH 를 $REMOTE_APP_DIR/$BASENAME 로 이동합니다."
            mv "$APP_PATH" "$REMOTE_APP_DIR/$BASENAME"
            APP_PATH="$REMOTE_APP_DIR/$BASENAME"
          fi

          # 3) 기존 프로세스 종료 (path 기준)
          CURRENT_PID=$(pgrep -f "$APP_PATH" || true)
          if [ -n "$CURRENT_PID" ]; then
            echo "> 기존 프로세스 종료: $CURRENT_PID"
            kill -15 $CURRENT_PID || true
            sleep 5
          else
            echo "> 기존 프로세스 없음"
          fi

          # 4) 시작 (로그 남기기)
          echo "> 새 애플리케이션 시작: $APP_PATH"

          # 환경변수 설정
          export EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://172.31.35.94:8765/eureka # <- Eureka Private IP
          export SERVER_PORT=9001 # <- 보안 그룹에서 설정 되어 있어야함
          export CPU_STRESS_NUMBER=500
          export LOGGING_LEVEL_ROOT=INFO
          export LOGGING_LEVEL_COM_EXAMPLE_USER_SERVICE=DEBUG # 사용자 패키지를 DEBUG로 설정
          export LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG  # Spring Web 관련 로그를 상세히 보고 싶을 때 추가
          
          nohup java -jar "$APP_PATH" >> "$LOG_FILE" 2>&1 &

          sleep 3

          if pgrep -f "$APP_PATH" > /dev/null; then
            echo "> 애플리케이션 실행 성공 (PID: $(pgrep -f "$APP_PATH" | head -n1))"
          else
            echo "> 애플리케이션 실행 실패 — 마지막 로그 100줄:"
            tail -n 100 "$LOG_FILE" || true
            exit 1
          fi
